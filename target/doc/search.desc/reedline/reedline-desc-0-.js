searchState.loadedDescShard("reedline", 0, "reedline <code>\\|/</code>\nActivation event for the menu. When the bool is true it …\nAn ANSI color. See 256 colors - cheat sheet for more info.\nShift + Tab key.\nBackspace delete from the current insertion point\nBackspace key (Delete on macOS, Backspace on other …\nBackspace command, tracking the deleted character (left of …\nBackspace delete a word from the current insertion point\nFrom the most recent entry backward\nA basic user-defined prompt (i.e. just text)\nBlack color.\nLight blue color.\nCapitalize the current character\nCaps Lock key.\nA character.\nClear the current buffer\nClears the screen and sets prompt to first line\nClears the screen and the scrollback buffer\nClear to the end of the current line\nRepresents a color.\nMenu to present suggestions in a columnar fashion It …\nWays to search for a particular command line in the <code>History</code>\nInsert completion: entire completion if there is only one …\nAn input that is complete as-is\nA trait that defines how to convert some text and a …\nCopy selection to local buffer\nCatch-all for actions that should always form a unique …\nEntry was aborted with <code>Ctrl+C</code>\nHandle SIGTERM key input\nAbort with <code>Ctrl+D</code> signalling <code>EOF</code> or abort of a whole …\nHandle EndOfLine event\nThe current date and time\nMaps cursor shapes to each edit mode (emacs, vi normal &amp; …\nA custom mode\nCut the WORD left of the insertion point\nCut the word right of the insertion point\nCut the WORD right of the insertion point and any …\nCut the grapheme right from the current insertion point\nCut the current line\nCut from the start of the current line to the insertion …\nCut from the start of the buffer to the insertion point\nCutUntil left before char\nCutUntil left until char\nCutUntil right before char\nCutUntil right until char\nCut selection to local buffer\nCut from the insertion point to the end of the buffer\nCut from the insertion point to the end of the current line\nCut the word left of the insertion point\nCut the word right of the insertion point\nCut the word right of the insertion point and any …\nA hinter that uses the completions or the history to show …\nLight cyan color.\nDark blue color.\nDark cyan color.\nDark green color.\nDark grey color.\nDark magenta color.\nDark red color.\nDark yellow color.\nDeactivation event\nThe default mode\nA default completer that can detect keywords\nA hinter that uses the completions or the history to show …\nSimple <code>Prompt</code> displaying a configurable left and a right …\nA struct to control the appearance of the left or right …\nA default validator which checks for mismatched quotes and …\nDelete in-place from the current insertion point\nDelete key. (Fn+Delete on macOS, Delete on other platforms)\nDelete command, tracking the deleted character (right of …\nDelete in-place a word from the current insertion point\nCompletion menu definition\nThe direction of the description box\nDown arrow key.\nMove down to the next line, if multiline, or down through …\nRun these commands in the editor\nLine buffer edit event. When the bool is true it means …\nEditing actions which can be mapped to key bindings.\nDefine the style of parsing for the edit events Available …\nStateful editor executing changes to the underlying …\nThis parses the incoming Events like a emacs style-editor\nEmacs normal mode\nAn empty prompt segment\nEnd key.\nMenu that uses Reedline’s completer to update its values\nEnter key.\nHandle enter event\nContains the error value\nEscape key.\nEsc event\nCommand line is the string.\nA simple, example highlighter that shows how to highlight …\nWay to bind the execution of a whole command (directly …\nF key.\nFailure to find the search\nStateful history that allows up/down-arrow browsing with …\nFrom the least recent entry forward\nLight green color.\nGrey color.\nDefault size of the <code>FileBackedHistory</code> used when calling …\nThe syntax highlighting trait. Implementers of this trait …\nA trait that’s responsible for returning the hint for …\nRepresents a history file or database Data could be stored …\nHistory does not support a feature\nComplete history hint (default in full)\nComplete a single token/word of the history hint\nRepresents one run command with some optional additional …\nUnique ID for the <code>HistoryItem</code>. More recent items have …\nMenu that uses the history as its completer\nNavigated the history using up or down arrows\nBrowsing modes for a <code>History</code>\nUnique ID for the session in which reedline was run to …\nHome key.\nI/O error\nMenu to present suggestions like similar to Ide completion …\nAn incomplete input which may need to span multiple lines …\nInsert key.\nInsertion mode\nInsert a character at the current insertion point\nCharacter insertion, tracking the character inserted\nInserts the system specific new line character\nInsert a string at the current insertion point\nRepresents a key.\nRepresents key modifiers (shift, control, alt, etc.).\nMain definition of editor keybindings\nThe “Begin” key (often mapped to the 5 key when Num …\nDescription is always shown on the left\nLeft arrow key.\nMove left to the next column, or completion entry\nIn memory representation of the entered line(s) including …\nStruct to store the menu style Context menu definition\nLower case the current word\nLight magenta color.\nA media key.\nTrait that defines how a menu will be printed by the …\nMenu key.\nTrigger a menu event. It activates a menu with the event …\nCommon builder for all menus\nMoves down in the menu\nDefines all possible events that could happen with a menu.\nMoves left in the menu\nNext element in the menu\nMove to the next history page\nMove to the previous history page\nPrevious element in the menu\nMoves right in the menu\nStruct to store the menu style\nMoves up in the menu\nA modifier key.\nMouse\nMove one WORD to the left\nMove one WORD to the right, stop at end of WORD\nMove one WORD to the right, stop at start of WORD\nMove the cursor position\nMoving down in the menu\nMove one character to the left\nMoving left in the menu\nMove left before char\nMove left until char\nMove one character to the right\nMoving right in the menu\nCutUntil right before char\nCutUntil right until char\nMove to the end of the buffer\nMove to the end of the current line\nMove to the start of the current line\nMove to position\nMove to the start of the buffer\nMoving up in the menu\nMove one word to the left\nMove one word to the right\nMove one word to the right, stop at end of word\nMove one word to the right, stop at start of word\nIn vi mode multiple reedline events can be chained while …\nSelecting next element in the menu\nNavigate to the next historic buffer\nMove to next page\nNo op event\n<code>bash</code> style browsing through the history. Contained …\nThe default mode\nNull.\nNum Lock key.\nContains the success value\nOpen text editor\nError within history\nPage down key.\nPage up key.\nImplementation of the output to the terminal\nSuccess for the search\nPaste content from local buffer at the current cursor …\nPaste the cut buffer in front of the insertion point (vi <code>p</code>)\nPaste the cut buffer in front of the insertion point …\nPause key.\nDescription is shown on the right of the completion if …\nCommand line starts with the same string\nSearch for entries starting with a particular string.\nSelecting previous element in the menu\nNavigate to the previous historic buffer\nMove to previous page\nPrint Screen key.\nAPI to provide a custom prompt.\nModes that the prompt can be in\nA representation of the history search\nThe current success/failure of the history search\nThe vi-specific modes that the prompt can be in\nLight red color.\nRedo an edit command from the undo history\nLine editor engine\nseparate struct to not expose anything to the public (for …\nnon-public (for now)\nReedline supported actions.\nAllowed menus in Reedline\nA wrapper for crossterm::event::Event.\nTrigger full repaint\nReplace a character\nReplace characters with string\nResets the terminal color.\ntrigger terminal resize\nStandard <code>std::result::Result</code>, with <code>ReedlineError</code> as the …\nAn RGB color. See RGB color model for more info.\nDescription is always shown on the right\nRight arrow key.\nMove right to the next column, completion entry, or …\nScroll Lock key.\nDefines how to traverse the history when executing a …\nDefines additional filters for querying the <code>History</code>\nSearch the history for a string\nQuery for search in the potentially rich <code>History</code>\nSelect whole input buffer\nValid ways how <code>Reedline::read_line()</code> can return\nHighlight all matches for a given search string in a line\nA span of source code, with positions in bytes\nA representation of a buffer with styling, used for doing …\nHandle unconditional submit event\nSubmit at the end of the <em>complete</em> text, otherwise newline\nCommand line contains the string\nFull exact search for all entries containing a string.\nEntry succeeded with the provided content\nSuggestion returned by the Completer\nSwap the current grapheme/character with the one to the …\nSwap the current word with the word to the right\nSwitch the case of the current character\nTab key.\nUndo the previous edit command\nEvery line change should come with an <code>UndoBehavior</code> tag, …\nUndo/Redo actions shouldn’t be reflected on the edit …\nTest\nUp arrow key.\nMove up to the previous line, if multiline, or up into the …\nUpper case the current word\nWhether or not the validation shows the input was complete\nThe syntax validation trait. Implementers of this trait …\nThis parses incoming input <code>Event</code>s like a Vi-Style editor\nA vi-specific mode\nWhite color.\nMenu that has its own Completer\nThe path of the current working directory\nLight yellow color.\nAdds a keybinding\nGet a flags value with all known bits set.\nall that contain string in reverse chronological order\nanything within this session\nWhether to append a space after selecting this suggestion. …\nCursor position <em>in front of</em> the next WORD to the left\nCursor position <em>at end of</em> the next WORD to the right\nCursor position <em>behind</em> the next WORD to the right\nCursor position <em>in front of</em> the next WORD to the right\nDefines a keybinding for a reedline event\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe component, styled parts of the text\nThe completion menu can try to find the common string and …\nThe columnar menu can try to find the common string and …\nThe menu does not need to partially complete\nThe menu should not try to auto complete to avoid comparing\nA menu may not be allowed to quick complete because it …\nThe columnar menu can to quick complete if there is only …\nThe menu stays active even with one record\nThe ide menu can to quick complete if there is only one …\nThere is no use for quick complete for the menu\nCapitalize the character at insertion point (or the first …\nConfigure the highlighter to use different colors\ndelete all history items\nEmpty buffer and reset cursor\nClears all the data from the tree\nA builder that clears the list of menus added to the engine\nClear all contents between <code>start</code> and <code>end</code> and change …\nClear the screen by printing enough whitespace to start …\nClear the screen and the scrollback buffer of the terminal\nClear everything beginning at the cursor to the right/end. …\nClear from the start of the buffer to the cursor. Keeps …\nClear beginning at the cursor up to the end of the line. …\nQuery for the command line content\nthe full command line as text\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nthe action that will take the line and position and …\nReturns a vector of completions and the position in which …\nReturn the current hint unformatted to perform the …\nsame as <code>Completer::complete</code> but it will return a vector of …\nsame as <code>Completer::complete</code> but it will return a vector of …\nWhether all set bits in a source flags value are also set …\ncount the results of a query\nreturn the total number of history items\nreturn the total number of history items\nCreate a new <code>Reedline</code> engine with a local <code>History</code> that is …\nGet a new history session id based on the current time and …\nReturn if the current operation should start a new undo …\nReturns the current contents of the input buffer.\nReturns the current insertion point of the input buffer.\nRange over the current line\nGets the range of the word the current edit position is …\nthe current working directory\nExact filter for the working directory\nPrefix filter for the working directory\nCreates an in-memory <code>History</code> with a maximal capacity of …\nReturns the current default emacs keybindings\nDefault Vi insert keybindings\nDefault Vi normal keybindings\nremove an item from this history\nDeletes before first character to the left of offset\nDeletes on grapheme to the left\nDeletes until first character to the left of offset\nDeletes before first character to the right of offset\nDeletes one grapheme to the right\nDeletes until first character to the right of offset\nDeletes one word to the left\nDeletes one word to the right\nOptional description for the replacement\nText style for the item description\nThe intersection of a source flags value with the …\nDirection to search in\nRemove current <code>Hinter</code>\nRemove the current <code>Validator</code>\nOn drop the content of the <code>History</code> will be written to the …\nthe duration the command took to complete\nEdit the <code>LineBuffer</code> in an undo-safe manner.\nWhat to display in the prompt indicator\nDetermine if a certain operation should be undoable or if …\nThe cursor to be used when in emacs mode\nGet a flags value with all bits unset.\nDefines an empty keybinding object\nThe ending position of the span, in bytes\nif given, only get results after/before this id (depending …\nif given, only get results after/before this time …\nChecks to see if the buffer ends with a given character\nQuery to get all entries in the given <code>SearchDirection</code>\nthe exit status of the command\nFilter whether the command completed\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nOptional vector of strings in the suggestion. These can be …\nAdditional filters defined with <code>SearchFilter</code>\nFind a keybinding based on the modifier and keycode\nFinds index for the first occurrence of a char to the left …\nFinds index for the first occurrence of a char to the …\nReturns where the current line terminates\nFormats the key modifiers using the given formatter.\nFormats the <code>KeyCode</code> using the given formatter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a ‘Color’ from the tuple representation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\ncreate a history item purely from the command line with …\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates a <code>Color</code> from the string representation.\nCreate a search filter with a <code>CommandLineSearch</code>\nCreate a search filter with a <code>CommandLineSearch</code> and <code>cwd</code>\nGet the text of the current <code>LineBuffer</code>\nOutput the current line in the multiline buffer\nReturn the previously generated history session id\nGet the default indicator color\nGet the default indicator color\nGet assigned keybindings\nGet the default prompt color\nGet the default prompt color\nGet the default multiline prompt color\nGet the default multiline prompt color\nGet the default right prompt color\nGet the default right prompt color\nGet the default keybindings and return a …\nReturn a <code>Vec&lt;String&gt;</code> of the Reedline <code>EditCommand</code>s\nReturn a <code>Vec</code> of the Reedline Keybinding Modifiers\nReturn a <code>Vec&lt;String&gt;</code> of the Reedline <code>KeyCode</code>s\nReturn a <code>Vec&lt;String&gt;</code> of the Reedline <code>PromptEditMode</code>s\nReturn a <code>Vec&lt;String&gt;</code> of the Reedline <code>ReedlineEvent</code>s\nIf a selection is active returns the selected range, …\nGets cached values from menu that will be displayed\nGets values from filler that will be displayed in the menu\nGets values from filler that will be displayed in the menu\nGets values from cached values that will be displayed in …\nGet the grapheme immediately to the left of the cursor, if …\nCursor position <em>in front of</em> the next unicode grapheme to …\nGet the grapheme immediately to the right of the cursor, …\nCursor position <em>behind</em> the next unicode grapheme to the …\nHandle the hinting duty by using the line, position, and …\nCheck if any commands have been run.\nThe action that will handle the current buffer as a line …\nRead-only view of the history\nMutable view of the history\nFilter based on the executing systems hostname\nthe hostname the commands were run in\nprimary key, unique across one history\nMenu indicator\nMenu indicator\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nInsert <code>external_commands</code> list in the object root\nInsert a single character at the insertion point and move …\nInserts the system specific new line character\nInsert <code>&amp;str</code> at the cursor position in the current line.\nGets the current edit position\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the menu is active\nDeactivates context menu\nDeactivates context menu\nDeactivates context menu\nDeactivates context menu\nWhether all known bits in this flags value are set.\nChecks to see if the cursor is on the first line of the …\nChecks to see if the cursor is on the last line of the …\nWhether all bits in this flags value are unset.\nCheck to see if the line buffer is empty\nCheck if the line buffer is valid utf-8 and the cursor …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nReturn if the terminal supports the kitty keyboard …\nGet the most recent entry starting with the <code>prefix</code>\nGet the most recent entry starting with the <code>prefix</code> and <code>cwd</code>\nGet the most recent entry matching <code>SearchFilter</code>\nWhat segment should be rendered in the left (main) prompt\nGet the length of the buffer\nHow many results to get\nCalculates the current the user is on\nGet the current <code>LineBuffer</code>\nload a history item by its id\nLowercases the current word\nText style of the parts of the suggestions that match the …\nSelects what type of event happened with the menu\nSelects what type of event happened with the menu\nSelects what type of event happened with the menu\nSelects what type of event happened with the menu\nSelects what type of event happened with the menu\nCollection of common functions that can be used to create …\nCalculates the real required lines for the menu …\nCalculates the real required lines for the menu …\nCreates the menu representation as a string which will be …\nCreates the menu representation as a string which will be …\nMinimum rows that should be displayed by the menu\nMinimum rows that should be displayed by the menu\nMinimum rows that should be displayed by the menu\nMinimum rows that should be displayed by the menu\nMinimum rows that should be displayed by the menu\nReturns the minimum word length to complete. This allows …\narbitrary additional information that might be interesting …\nMove cursor position <em>in front of</em> the next WORD to the left\nMove cursor position to the end of the next WORD\nMove cursor position to the start of the next WORD\nMove cursor position <em>in front of</em> the next unicode grapheme …\nMoves the insertion point before the next char to the left …\nMoves the insertion point until the next char to the left …\nMoves one line down\nMoves one line up\nMove cursor position <em>behind</em> the next unicode grapheme to …\nMoves the insertion point before the next char to the right\nMoves the insertion point until the next char to the right\nSet the insertion point <em>behind</em> the last character.\nMove cursor position to the end of the line\nMove the cursor before the first character of the line\nReset the insertion point to the start of the buffer\nMove cursor position <em>in front of</em> the next word to the left\nMove cursor position <em>behind</em> the next word to the right\nMove cursor position to the end of the next word\nMove cursor position to the start of the next word\nMenu name\nMenu name\nA constructor to create a history search\nEmacs style input parsing constructor if you want to use …\nCreates Vi editor using defined keybindings\nConstruct the default highlighter with a given set of …\nCreate a simple highlighter that styles every exact match …\nCreate a line buffer instance\nConstruct a new <code>StyledText</code>\nCreates a new in-memory history that remembers …\nCreate a new <code>HistoryItemId</code> value\nConstructor for the default prompt, which takes a …\nNew keybining\nCreates a new <code>Span</code> from start and end inputs. The end …\nConstruct the default completer with a list of …\nConstruct the default completer with a list of …\nReturn the first semantic token of the hint for …\nCursor position on the next whitespace\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nCounts the number of lines in the buffer\nChecks to see if the current edit position is pointing to …\nParses an ANSI color sequence.\nTranslate the given user input event into what the …\naction that will return a partial section of available …\naction that will return a partial section of available …\nOutput the complete <code>History</code> chronologically with numbering …\nOutput the complete <code>History</code> for this session, …\nPrint the history session id\nReturns the corresponding expected prompt style for the …\nAdd a new styled string to the buffer\nGet the unformatted text as a single continuous string.\nWait for input and provide the user with a specified <code>Prompt</code>…\nReturns the available lines from the prompt down\nThe intersection of a source flags value with the …\nRemove a keybinding\nRender the styled string. We use the insertion point to …\nRender the prompt indicator for <code>Ctrl-R</code> history search\nRender the prompt indicator (Last part of the prompt that …\nProvide content of the left full prompt\nIndicator to show before explicit new lines\nProvide content of the right full prompt\nApply the ANSI style formatting to the full string.\nIndicates how to replace in the line buffer the selected …\nThe buffer gets replaced in the Span location\nThe buffer gets replaced in the Span location\nThe buffer gets replaced in the Span location\nThe buffer gets cleared with the actual value\nSubstitute text covered by <code>range</code> in the current line\nWhat segment should be rendered in the right prompt\nWhether to render right prompt on the last line\nWhether to render right prompt on the last line\nExecutes <code>EditCommand</code> actions by modifying the internal …\nsave a history item to the database if given id is None, a …\nonly saves a value if it’s different than the last value\nHeight of the current terminal window\nWidth of the current terminal window\nreturn the results of a query\nText style of the parts of the suggestions that match the …\nText style for selected text in a menu\nget the history session id\nFilter on the session id\na unique id for one shell session. used so the history can …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet to a single line of <code>buffer</code> and reset the <code>InsertionPoint</code>…\nSets the position of the cursor (currently only required …\nSets the position of the cursor (currently only required …\nSet a new history session id This should be used in …\nSets the current edit position\nSets the minimum word length to complete on. Smaller words …\nMenu settings\nMenu settings\nMenu settings\nMenu settings\nGet MenuSettings\nGet MenuSettings\nGet mutable MenuSettings required for the builder functions\nReturns the size of the tree, the amount of nodes, not …\nReplacement span in the buffer\nThe starting position of the span, in bytes\nif given, only get results after/before this id (depending …\nif given, only get results after/before this time …\ndate-time when this command was started\nReturns the state necessary before suspending the painter …\nThe status of the search\nOptional style for the replacement\nStyle range with the provided style\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nSwaps current grapheme with grapheme on right\nSwaps current word with word on right\nSwitches the ASCII case of the current char\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nensure that this history is written to disk\nWrites unwritten history contents to disk.\nUpdate the underlying <code>History</code> to/from disk\nThe search term used during the search\nText style for not selected text in the menu\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nToggle between having a history that uses the history …\nnumber of available completions\nnumber of available completions\nTry to create a <code>Color</code> from the string representation. This …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nupdate an item atomically\nupdate the last history item with more information\nUpdates the values presented in the menu This function …\nUpdates menu values\nUpdates menu values\nUpdate menu values\nCollecting the value from the completer to be shown in the …\nThe working details of a menu are values that could change …\nThe working details for the menu changes based on the size …\nThe working details for the menu changes based on the size …\nThe working details for the menu changes based on the size …\nUppercases the current word\nToggle whether reedline enables bracketed paste to reed …\nToggle whether reedline uses the kitty keyboard …\nThe action that will handle the current buffer as a line …\nString replacement that will be introduced to the the …\nThe cursor to be used when in vi insert mode\nThe cursor to be used when in vi normal mode\nA builder which enables or disables the use of ansi …\nMenu builder with new value for border\nA builder that configures the alternate text editor used …\nMenu builder with new column width value\nMenu builder with new column width value\nMenu builder with new column width value\nMenu builder with new column width value\nMenu builder with new columns value\nMenu builder with new columns value\nA builder to configure the tab completion\nMenu builder with new correct cursor pos\nA builder that enables reedline changing the cursor shape …\nMenu builder with new value for cursor offset\nUpdate current working directory.\nMenu builder with the default border\nMenu builder with new description mode\nMenu builder with new description offset\nMenu builder with new description rows value\nMenu builder with new value for description style\nMenu builder with new value for description style\nA builder which configures the edit mode for your instance …\nCreates a new history with an associated history file.\nA builder that configures the highlighter for your …\nA builder to include a <code>Hinter</code> in your instance of the …\nA builder which configures the history for your instance …\nA builder which configures history exclusion for your …\nA builder that adds the history item id\nCreate a new <code>DefaultCompleter</code> with provided non alphabet …\nMenu builder with new value for marker\nMenu builder with new value for marker\nSet style for the matches found\nMenu builder with new value for match style This is the …\nMenu builder with new value for match style This is the …\nMenu builder with new value for max completion height\nMenu builder with new value for max completion width\nMenu builder with new max description height\nMenu builder with new max description width\nMenu builder with max entry lines\nA builder that appends a menu to the engine\nA builder that sets the number of characters that have to …\nA builder that sets the number of characters that have to …\nMenu builder with new value for min completion width\nMenu builder with new min description width\nMenu builder with new name\nMenu builder with new name\nSet style for the text that does not match the query\nMenu builder with new value for only_buffer_difference\nMenu builder with new value for only_buffer_difference\nMenu builder with new value for padding\nMenu builder with new page size\nTurn on partial completions. These completions will fill …\nUpdate query string to match\nTurn on quick completions. These completions will …\nMenu builder with new value for selected match style This …\nMenu builder with new value for selected match style This …\nMenu builder with new value for selected text style\nMenu builder with new value for selected text style\nMenu builder with new selection rows value\nA builder that sets the style applied to the hint as part …\nA builder that sets the style applied to the hint as part …\nMenu builder with new value for text style\nMenu builder with new value for text style\nSet a different prompt to be used after submitting each …\nA builder that configures the validator for your instance …\nA builder that configures the style used for visual …\nReturns a count of how many words that exist in the tree\nCursor position <em>in front of</em> the next word to the left\nCursor position <em>at end of</em> the next word to the right\nCursor position <em>behind</em> the next word to the right\nCursor position <em>in front of</em> the next word to the right\nChar to move towards\nChar to move towards\nChar to move towards\nChar to move towards\nPosition to move to\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nSelect the text between the current cursor position and …\nUnsupported feature\nCustom display name for the history\nExternal completer defined outside Reedline\nBase menu\nBackward search for a prefix\nBackward index search\nForward index search\nLast executed command.\nLast token\nDirection of the index found in the string\nIndex result obtained from parsing a string with an index …\nDirection of the search based on the marker\nHelper for <code>Menu::can_partially_complete</code>\nGet the part of the line that should be given as input to …\nFinds index for the common string in a list of suggestions\nReturns the argument unchanged.\nReturns the argument unchanged.\nParsed value from the marker\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMarker representation as string\nSplits a string that contains a marker character\nPrefix to search for\nText before the marker\nHelper to accept a completion suggestion and edit the …\nFinds different string between two strings")